!function(e){function n(n){for(var o,r,i=n[0],a=n[1],s=n[2],l=0,c=[];l<i.length;l++)r=i[l],Object.prototype.hasOwnProperty.call(I,r)&&I[r]&&c.push(I[r][0]),I[r]=0;for(o in a)Object.prototype.hasOwnProperty.call(a,o)&&(e[o]=a[o]);for(F&&F(n);c.length;)c.shift()();return x.push.apply(x,s||[]),t()}function t(){for(var e,n=0;n<x.length;n++){for(var t=x[n],o=!0,r=1;r<t.length;r++){var i=t[r];0!==I[i]&&(o=!1)}o&&(x.splice(n--,1),e=N(N.s=t[0]))}return e}var o=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,n){if(!S[e]||!b[e])return;for(var t in b[e]=!1,n)Object.prototype.hasOwnProperty.call(n,t)&&(g[t]=n[t]);0==--_&&0===v&&E()}(e,n),o&&o(e,n)};var r,i=!0,a="ee3569e4513ea6248da8",s=1e4,l={},c=[],u=[];function f(e){var n={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,t){if(void 0===e)n._selfAccepted=!0;else if("function"==typeof e)n._selfAccepted=e;else if("object"==typeof e)for(var o=0;o<e.length;o++)n._acceptedDependencies[e[o]]=t||function(){};else n._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)n._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)n._declinedDependencies[e[t]]=!0;else n._declinedDependencies[e]=!0},dispose:function(e){n._disposeHandlers.push(e)},addDisposeHandler:function(e){n._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=n._disposeHandlers.indexOf(e);t>=0&&n._disposeHandlers.splice(t,1)},check:R,apply:B,status:function(e){if(!e)return p;d.push(e)},addStatusHandler:function(e){d.push(e)},removeStatusHandler:function(e){var n=d.indexOf(e);n>=0&&d.splice(n,1)},data:l[e]};return r=void 0,n}var d=[],p="idle";function h(e){p=e;for(var n=0;n<d.length;n++)d[n].call(null,e)}var A,g,m,_=0,v=0,C={},b={},S={};function y(e){return+e+""===e?+e:e}function R(e){if("idle"!==p)throw new Error("check() is only allowed in idle status");return i=e,h("check"),(n=s,n=n||1e4,new Promise((function(e,t){if("undefined"==typeof XMLHttpRequest)return t(new Error("No browser support"));try{var o=new XMLHttpRequest,r=N.p+""+a+".hot-update.json";o.open("GET",r,!0),o.timeout=n,o.send(null)}catch(e){return t(e)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)t(new Error("Manifest request to "+r+" timed out."));else if(404===o.status)e();else if(200!==o.status&&304!==o.status)t(new Error("Manifest request to "+r+" failed."));else{try{var n=JSON.parse(o.responseText)}catch(e){return void t(e)}e(n)}}}))).then((function(e){if(!e)return h("idle"),null;b={},C={},S=e.c,m=e.h,h("prepare");var n=new Promise((function(e,n){A={resolve:e,reject:n}}));for(var t in g={},I)w(t);return"prepare"===p&&0===v&&0===_&&E(),n}));var n}function w(e){S[e]?(b[e]=!0,_++,function(e){var n=document.createElement("script");n.charset="utf-8",n.src=N.p+""+e+"."+a+".hot-update.js",document.head.appendChild(n)}(e)):C[e]=!0}function E(){h("ready");var e=A;if(A=null,e)if(i)Promise.resolve().then((function(){return B(i)})).then((function(n){e.resolve(n)}),(function(n){e.reject(n)}));else{var n=[];for(var t in g)Object.prototype.hasOwnProperty.call(g,t)&&n.push(y(t));e.resolve(n)}}function B(n){if("ready"!==p)throw new Error("apply() is only allowed in ready status");var t,o,r,i,s;function u(e){for(var n=[e],t={},o=n.map((function(e){return{chain:[e],id:e}}));o.length>0;){var r=o.pop(),a=r.id,s=r.chain;if((i=L[a])&&!i.hot._selfAccepted){if(i.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:a};if(i.hot._main)return{type:"unaccepted",chain:s,moduleId:a};for(var l=0;l<i.parents.length;l++){var c=i.parents[l],u=L[c];if(u){if(u.hot._declinedDependencies[a])return{type:"declined",chain:s.concat([c]),moduleId:a,parentId:c};-1===n.indexOf(c)&&(u.hot._acceptedDependencies[a]?(t[c]||(t[c]=[]),f(t[c],[a])):(delete t[c],n.push(c),o.push({chain:s.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:t}}function f(e,n){for(var t=0;t<n.length;t++){var o=n[t];-1===e.indexOf(o)&&e.push(o)}}n=n||{};var d={},A=[],_={},v=function(){console.warn("[HMR] unexpected require("+b.moduleId+") to disposed module")};for(var C in g)if(Object.prototype.hasOwnProperty.call(g,C)){var b;s=y(C);var R=!1,w=!1,E=!1,B="";switch((b=g[C]?u(s):{type:"disposed",moduleId:C}).chain&&(B="\nUpdate propagation: "+b.chain.join(" -> ")),b.type){case"self-declined":n.onDeclined&&n.onDeclined(b),n.ignoreDeclined||(R=new Error("Aborted because of self decline: "+b.moduleId+B));break;case"declined":n.onDeclined&&n.onDeclined(b),n.ignoreDeclined||(R=new Error("Aborted because of declined dependency: "+b.moduleId+" in "+b.parentId+B));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(b),n.ignoreUnaccepted||(R=new Error("Aborted because "+s+" is not accepted"+B));break;case"accepted":n.onAccepted&&n.onAccepted(b),w=!0;break;case"disposed":n.onDisposed&&n.onDisposed(b),E=!0;break;default:throw new Error("Unexception type "+b.type)}if(R)return h("abort"),Promise.reject(R);if(w)for(s in _[s]=g[s],f(A,b.outdatedModules),b.outdatedDependencies)Object.prototype.hasOwnProperty.call(b.outdatedDependencies,s)&&(d[s]||(d[s]=[]),f(d[s],b.outdatedDependencies[s]));E&&(f(A,[b.moduleId]),_[s]=v)}var x,T=[];for(o=0;o<A.length;o++)s=A[o],L[s]&&L[s].hot._selfAccepted&&_[s]!==v&&T.push({module:s,errorHandler:L[s].hot._selfAccepted});h("dispose"),Object.keys(S).forEach((function(e){!1===S[e]&&function(e){delete I[e]}(e)}));for(var O,M,F=A.slice();F.length>0;)if(s=F.pop(),i=L[s]){var H={},D=i.hot._disposeHandlers;for(r=0;r<D.length;r++)(t=D[r])(H);for(l[s]=H,i.hot.active=!1,delete L[s],delete d[s],r=0;r<i.children.length;r++){var V=L[i.children[r]];V&&((x=V.parents.indexOf(s))>=0&&V.parents.splice(x,1))}}for(s in d)if(Object.prototype.hasOwnProperty.call(d,s)&&(i=L[s]))for(M=d[s],r=0;r<M.length;r++)O=M[r],(x=i.children.indexOf(O))>=0&&i.children.splice(x,1);for(s in h("apply"),a=m,_)Object.prototype.hasOwnProperty.call(_,s)&&(e[s]=_[s]);var U=null;for(s in d)if(Object.prototype.hasOwnProperty.call(d,s)&&(i=L[s])){M=d[s];var k=[];for(o=0;o<M.length;o++)if(O=M[o],t=i.hot._acceptedDependencies[O]){if(-1!==k.indexOf(t))continue;k.push(t)}for(o=0;o<k.length;o++){t=k[o];try{t(M)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:s,dependencyId:M[o],error:e}),n.ignoreErrored||U||(U=e)}}}for(o=0;o<T.length;o++){var P=T[o];s=P.module,c=[s];try{N(s)}catch(e){if("function"==typeof P.errorHandler)try{P.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:s,error:t,originalError:e}),n.ignoreErrored||U||(U=t),U||(U=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:s,error:e}),n.ignoreErrored||U||(U=e)}}return U?(h("fail"),Promise.reject(U)):(h("idle"),new Promise((function(e){e(A)})))}var L={},I={0:0},x=[];function N(n){if(L[n])return L[n].exports;var t=L[n]={i:n,l:!1,exports:{},hot:f(n),parents:(u=c,c=[],u),children:[]};return e[n].call(t.exports,t,t.exports,function(e){var n=L[e];if(!n)return N;var t=function(t){return n.hot.active?(L[t]?-1===L[t].parents.indexOf(e)&&L[t].parents.push(e):(c=[e],r=t),-1===n.children.indexOf(t)&&n.children.push(t)):(console.warn("[HMR] unexpected require("+t+") from disposed module "+e),c=[]),N(t)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return N[e]},set:function(n){N[e]=n}}};for(var i in N)Object.prototype.hasOwnProperty.call(N,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(t,i,o(i));return t.e=function(e){return"ready"===p&&h("prepare"),v++,N.e(e).then(n,(function(e){throw n(),e}));function n(){v--,"prepare"===p&&(C[e]||w(e),0===v&&0===_&&E())}},t.t=function(e,n){return 1&n&&(e=t(e)),N.t(e,-2&n)},t}(n)),t.l=!0,t.exports}N.m=e,N.c=L,N.d=function(e,n,t){N.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},N.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},N.t=function(e,n){if(1&n&&(e=N(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(N.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)N.d(t,o,function(n){return e[n]}.bind(null,o));return t},N.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return N.d(n,"a",n),n},N.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},N.p="",N.h=function(){return a};var T=window.webpackJsonp=window.webpackJsonp||[],O=T.push.bind(T);T.push=n,T=T.slice();for(var M=0;M<T.length;M++)n(T[M]);var F=O;x.push([62,1]),t()}({10:function(e,n,t){(n=t(28)(!0)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto&display=swap);"]),n.push([e.i,"html,body{margin:0;padding:0;overflow:hidden;background-color:black;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}h1,h2,h3,p{color:white;font-family:Roboto}#screen__loading{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);text-align:center}#screen__loading h1{color:#FF5555;font-size:2.5em}#screen__menu{position:relative;height:100%}#screen__menu .selection{position:absolute;margin-left:40px;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}#screen__menu .selection h1{margin-top:0;font-size:4em;text-shadow:black 2px 2px;color:#FF5555}#screen__menu .selection h2{margin:5px 0;font-size:2em;text-shadow:black 1px 1px;-webkit-transition:all 0.2s ease;transition:all 0.2s ease}#screen__menu .selection h2:hover{color:#FF5555;cursor:pointer;-webkit-transform:translateX(10px);transform:translateX(10px)}#screen__menu .party{position:absolute;margin-right:15px;width:200px;right:0;top:0}#screen__menu .party h3{margin:5px 0}#screen__menu .party p{margin:0;margin-left:5px}#screen__menu .party #queueType{color:lightblue}#screen__menu .party #queueSlots{float:right}#screen__menu .credits{position:absolute;margin-right:15px;width:400px;right:0;bottom:0;text-align:right}#screen__menu .credits h1{margin-top:0;font-size:1.2em;text-shadow:black 2px 2px;margin-bottom:3px}#screen__menu .credits a{color:#FF5555;text-decoration:none}#screen__game #force{position:absolute;margin-right:15px;margin-bottom:15px;right:0;bottom:0;background:rgba(0,0,0,0.6);width:60px;height:210px}#screen__game #force__value{width:50px;height:200px;margin-top:5px;margin-left:5px;background:rgba(255,85,85,0.8);-webkit-transform:scaleY(0);transform:scaleY(0);-webkit-transform-origin:bottom;transform-origin:bottom}.screen{position:relative}.screen #game{width:100vw;height:100vh;display:block}.screen #overlay{position:absolute;top:0;left:0;right:0;bottom:0;color:white;padding:1em}.screen #overlay .corner{position:absolute;margin-right:15px;width:200px;right:0;top:0;text-align:right}.screen #overlay .corner h3{margin:5px 0;text-shadow:black 1px 1px;color:#FF5555}.screen #overlay .corner p{margin:0;margin-left:5px;text-shadow:black 1px 1px}#dialog{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);text-align:center;background:rgba(0,0,0,0.7);padding:5px 15px}#dialog h2{font-size:1.6em}#dialog h2 span{-webkit-transition:color 0.2s ease;transition:color 0.2s ease}#dialog h2 span:hover{color:#FF5555;cursor:pointer}#dialog__yes{padding-right:10px}#dialog__no{padding-left:10px}#flow__personal-best{color:gold}\n","",{version:3,sources:["D:/Git/Hobbies/minigolf/src/styles/styles.scss"],names:[],mappings:"AAA2E,UAAU,QAAQ,CAAC,SAAS,CAAC,eAAe,CAAC,sBAAsB,CAAC,wBAAwB,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,WAAW,WAAW,CAAC,kBAAkB,CAAC,iBAAiB,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,uCAAuC,CAAC,+BAA+B,CAAC,iBAAiB,CAAC,oBAAoB,aAAa,CAAC,eAAe,CAAC,cAAc,iBAAiB,CAAC,WAAW,CAAC,yBAAyB,iBAAiB,CAAC,gBAAgB,CAAC,OAAO,CAAC,kCAAkC,CAAC,0BAA0B,CAAC,4BAA4B,YAAY,CAAC,aAAa,CAAC,yBAAyB,CAAC,aAAa,CAAC,4BAA4B,YAAY,CAAC,aAAa,CAAC,yBAAyB,CAAC,gCAAgC,CAAC,wBAAwB,CAAC,kCAAkC,aAAa,CAAC,cAAc,CAAC,kCAAkC,CAAC,0BAA0B,CAAC,qBAAqB,iBAAiB,CAAC,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,wBAAwB,YAAY,CAAC,uBAAuB,QAAQ,CAAC,eAAe,CAAC,gCAAgC,eAAe,CAAC,iCAAiC,WAAW,CAAC,uBAAuB,iBAAiB,CAAC,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAC,0BAA0B,YAAY,CAAC,eAAe,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,yBAAyB,aAAa,CAAC,oBAAoB,CAAC,qBAAqB,iBAAiB,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,0BAA0B,CAAC,UAAU,CAAC,YAAY,CAAC,4BAA4B,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC,eAAe,CAAC,8BAA8B,CAAC,2BAA2B,CAAC,mBAAmB,CAAC,+BAA+B,CAAC,uBAAuB,CAAC,QAAQ,iBAAiB,CAAC,cAAc,WAAW,CAAC,YAAY,CAAC,aAAa,CAAC,iBAAiB,iBAAiB,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,yBAAyB,iBAAiB,CAAC,iBAAiB,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,4BAA4B,YAAY,CAAC,yBAAyB,CAAC,aAAa,CAAC,2BAA2B,QAAQ,CAAC,eAAe,CAAC,yBAAyB,CAAC,QAAQ,iBAAiB,CAAC,OAAO,CAAC,QAAQ,CAAC,uCAAuC,CAAC,+BAA+B,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,gBAAgB,CAAC,WAAW,eAAe,CAAC,gBAAgB,kCAAkC,CAAC,0BAA0B,CAAC,sBAAsB,aAAa,CAAC,cAAc,CAAC,aAAa,kBAAkB,CAAC,YAAY,iBAAiB,CAAC,qBAAqB,UAAU",file:"styles.scss",sourcesContent:['@import url("https://fonts.googleapis.com/css?family=Roboto&display=swap");html,body{margin:0;padding:0;overflow:hidden;background-color:black;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}h1,h2,h3,p{color:white;font-family:Roboto}#screen__loading{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);text-align:center}#screen__loading h1{color:#FF5555;font-size:2.5em}#screen__menu{position:relative;height:100%}#screen__menu .selection{position:absolute;margin-left:40px;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}#screen__menu .selection h1{margin-top:0;font-size:4em;text-shadow:black 2px 2px;color:#FF5555}#screen__menu .selection h2{margin:5px 0;font-size:2em;text-shadow:black 1px 1px;-webkit-transition:all 0.2s ease;transition:all 0.2s ease}#screen__menu .selection h2:hover{color:#FF5555;cursor:pointer;-webkit-transform:translateX(10px);transform:translateX(10px)}#screen__menu .party{position:absolute;margin-right:15px;width:200px;right:0;top:0}#screen__menu .party h3{margin:5px 0}#screen__menu .party p{margin:0;margin-left:5px}#screen__menu .party #queueType{color:lightblue}#screen__menu .party #queueSlots{float:right}#screen__menu .credits{position:absolute;margin-right:15px;width:400px;right:0;bottom:0;text-align:right}#screen__menu .credits h1{margin-top:0;font-size:1.2em;text-shadow:black 2px 2px;margin-bottom:3px}#screen__menu .credits a{color:#FF5555;text-decoration:none}#screen__game #force{position:absolute;margin-right:15px;margin-bottom:15px;right:0;bottom:0;background:rgba(0,0,0,0.6);width:60px;height:210px}#screen__game #force__value{width:50px;height:200px;margin-top:5px;margin-left:5px;background:rgba(255,85,85,0.8);-webkit-transform:scaleY(0);transform:scaleY(0);-webkit-transform-origin:bottom;transform-origin:bottom}.screen{position:relative}.screen #game{width:100vw;height:100vh;display:block}.screen #overlay{position:absolute;top:0;left:0;right:0;bottom:0;color:white;padding:1em}.screen #overlay .corner{position:absolute;margin-right:15px;width:200px;right:0;top:0;text-align:right}.screen #overlay .corner h3{margin:5px 0;text-shadow:black 1px 1px;color:#FF5555}.screen #overlay .corner p{margin:0;margin-left:5px;text-shadow:black 1px 1px}#dialog{position:absolute;top:50%;left:50%;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);text-align:center;background:rgba(0,0,0,0.7);padding:5px 15px}#dialog h2{font-size:1.6em}#dialog h2 span{-webkit-transition:color 0.2s ease;transition:color 0.2s ease}#dialog h2 span:hover{color:#FF5555;cursor:pointer}#dialog__yes{padding-right:10px}#dialog__no{padding-left:10px}#flow__personal-best{color:gold}\n']}]),e.exports=n},12:function(e,n){},13:function(e,n){},26:function(e,n,t){var o=t(27),r=t(10);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[e.i,r,""]]);var i={insert:"head",singleton:!1},a=o(e.i,r,i),s=r.locals?r.locals:{};r.locals||e.hot.accept(10,(function(){var n=t(10);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]),a(n)})),e.hot.dispose((function(){a()})),e.exports=s},62:function(e,n,t){"use strict";t.r(n);t(26);var o,r,i=function(){function e(){}return e.initialize=function(e){var n=document.getElementById(e);if(void 0===n)throw new Error("Passed element is not a valid canvas");if(void 0===(o=n.getContext("webgl2")))throw new Error("Failed to initialize WebGL");return n},e}(),a=t(6),s=function(){function e(e,n){this._attributes={},this._uniforms={},this._headers="#version 300 es\n\n",this._vertexSource=e,this._fragmentSource=n}return e.prototype.define=function(e){this._headers+="#define "+e+"\n"},e.prototype.build=function(){var e=this.loadShader(this._headers+this._vertexSource,o.VERTEX_SHADER),n=this.loadShader(this._headers+this._fragmentSource,o.FRAGMENT_SHADER);if(this._program=o.createProgram(),o.attachShader(this._program,e),o.attachShader(this._program,n),o.linkProgram(this._program),!o.getProgramParameter(this._program,o.LINK_STATUS))throw new Error("Program link failed\n"+o.getProgramInfoLog(this._program));for(var t=0;t<o.getProgramParameter(this._program,o.ACTIVE_ATTRIBUTES);++t){var r=o.getActiveAttrib(this._program,t);this._attributes[r.name]=o.getAttribLocation(this._program,r.name)}for(t=0;t<o.getProgramParameter(this._program,o.ACTIVE_UNIFORMS);++t){r=o.getActiveUniform(this._program,t);this._uniforms[r.name]=o.getUniformLocation(this._program,r.name)}},e.prototype.use=function(){o.useProgram(this._program)},e.prototype.getAttributeLocation=function(e){if(void 0===this._attributes[e])throw new Error("Attribute location '"+e+"' not found");return this._attributes[e]},e.prototype.getUniformLocation=function(e){if(void 0===this._uniforms[e])throw new Error("Uniform location '"+e+"' not found");return this._uniforms[e]},e.prototype.loadShader=function(e,n){var t=o.createShader(n);if(o.shaderSource(t,e),o.compileShader(t),!o.getShaderParameter(t,o.COMPILE_STATUS))throw new Error("Shader compilation failed ("+(n===o.VERTEX_SHADER?"VERTEX_SHADER":"FRAGMENT_SHADER")+")\n"+o.getShaderInfoLog(t));return t},e}(),l="\nlayout (location = 0) in vec3 aPosition;\n#ifdef HAS_NORMALS\nlayout (location = 1) in vec3 aNormals;\nout vec3 vNormals;\n#endif\n#ifdef HAS_TEXCOORDS\nlayout (location = 2) in vec2 aTexCoords;\n#endif\n#ifdef HAS_COLORS\nlayout (location = 3) in vec4 aColor;\nout vec4 vColor;\n#endif\n\nuniform mat4 uView;\nuniform mat4 uProjection;\nuniform mat4 uModel;\n\nout vec3 vPosition;\nout vec2 vTexCoords;\n\nvoid main() {\n    vec4 pos = uModel * vec4(aPosition, 1.0);\n    vPosition = vec3(pos.xyz) / pos.w;\n\n#ifdef HAS_NORMALS\n#ifdef IS_WATER\n    vNormals = aNormals;\n#else\n    mat4 uNormals = transpose(inverse(uModel));\n    vNormals = normalize(vec3(uNormals * vec4(normalize(aNormals).xyz, 1.0)));\n#endif\n#endif\n\n    vTexCoords = vec2(0.0, 0.0);\n#ifdef HAS_TEXCOORDS\n    vTexCoords = aTexCoords;\n#endif\n\n#ifdef HAS_COLORS\n    vColor = aColor;\n#endif\n\n    gl_Position = uProjection * uView * vec4(aPosition, 1.0);\n}\n",c="\nprecision highp float;\n\nin vec3 vPosition;\nin vec2 vTexCoords;\n\n#ifdef HAS_NORMALS\nin vec3 vNormals;\n#endif\n\n#ifdef HAS_COLORS\nin vec4 vColor;\n#endif\n\nuniform vec3 uCamera;\n\nuniform float uMetallicFactor;\nuniform float uRoughnessFactor;\nuniform vec4 uBaseColorFactor;\n\nfloat uExposure = 1.0;\n\n\nconst float M_PI = 3.141592653589793;\n\nconst float c_MinReflectance = 0.04;\n\nstruct AngularInfo\n{\n    float NdotL;                  // cos angle between normal and light direction\n    float NdotV;                  // cos angle between normal and view direction\n    float NdotH;                  // cos angle between normal and half vector\n    float LdotH;                  // cos angle between light direction and half vector\n\n    float VdotH;                  // cos angle between view direction and half vector\n\n    vec3 padding;\n};\n\nvec4 getVertexColor()\n{\n    vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n\n#ifdef HAS_COLORS\n    color = vColor;\n#endif\n\n    return color;\n}\n\nvec2 getNormalUV()\n{\n    vec3 uv = vec3(vTexCoords, 1.0);\n\n    #ifdef HAS_NORMAL_UV_TRANSFORM\n    uv *= u_NormalUVTransform;\n    #endif\n\n    return uv.xy;\n}\n\nvec3 getNormal()\n{\n    vec2 UV = getNormalUV();\n\n    // Retrieve the tangent space matrix\n#ifndef HAS_TANGENTS\n    vec3 pos_dx = dFdx(vPosition);\n    vec3 pos_dy = dFdy(vPosition);\n    vec3 tex_dx = dFdx(vec3(UV, 0.0));\n    vec3 tex_dy = dFdy(vec3(UV, 0.0));\n    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n\n#ifdef HAS_NORMALS\n    vec3 ng = normalize(vNormals);\n#else\n    vec3 ng = cross(pos_dx, pos_dy);\n#endif\n\n    t = normalize(t - ng * dot(ng, t));\n    vec3 b = normalize(cross(ng, t));\n    mat3 tbn = mat3(t, b, ng);\n#else // HAS_TANGENTS\n    mat3 tbn = v_TBN;\n#endif\n\n#ifdef HAS_NORMAL_MAP\n    vec3 n = texture2D(u_NormalSampler, UV).rgb;\n    n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));\n#else\n    // The tbn matrix is linearly interpolated, so we need to re-normalize\n    vec3 n = normalize(tbn[2].xyz);\n#endif\n\n    return n;\n}\n\nvec3 getSurface()\n{\n    vec2 UV = getNormalUV();\n\n    // Retrieve the tangent space matrix\n#ifndef HAS_TANGENTS\n    vec3 pos_dx = dFdx(vPosition);\n    vec3 pos_dy = dFdy(vPosition);\n    vec3 tex_dx = dFdx(vec3(UV, 0.0));\n    vec3 tex_dy = dFdy(vec3(UV, 0.0));\n    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n\n#ifdef HAS_NORMALS\n    vec3 ng = normalize(vNormals);\n#else\n    vec3 ng = cross(pos_dx, pos_dy);\n#endif\n\n    t = normalize(t - ng * dot(ng, t));\n    vec3 b = normalize(cross(ng, t));\n    mat3 tbn = mat3(t, b, ng);\n#else // HAS_TANGENTS\n    mat3 tbn = v_TBN;\n#endif\n\n    // The tbn matrix is linearly interpolated, so we need to re-normalize\n    vec3 n = normalize(tbn[2].xyz);\n\n    return n;\n}\n\nfloat getPerceivedBrightness(vec3 vector)\n{\n    return sqrt(0.299 * vector.r * vector.r + 0.587 * vector.g * vector.g + 0.114 * vector.b * vector.b);\n}\n\nAngularInfo getAngularInfo(vec3 pointToLight, vec3 normal, vec3 view)\n{\n    // Standard one-letter names\n    vec3 n = normalize(normal);           // Outward direction of surface point\n    vec3 v = normalize(view);             // Direction from surface point to view\n    vec3 l = normalize(pointToLight);     // Direction from surface point to light\n    vec3 h = normalize(l + v);            // Direction of the vector between l and v\n\n    float NdotL = clamp(dot(n, l), 0.0, 1.0);\n    float NdotV = clamp(dot(n, v), 0.0, 1.0);\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\n    float LdotH = clamp(dot(l, h), 0.0, 1.0);\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\n\n    return AngularInfo(\n        NdotL,\n        NdotV,\n        NdotH,\n        LdotH,\n        VdotH,\n        vec3(0, 0, 0)\n    );\n}\n\nfloat clampedDot(vec3 x, vec3 y)\n{\n    return clamp(dot(x, y), 0.0, 1.0);\n}\n\n\nconst float GAMMA = 2.2;\nconst float INV_GAMMA = 1.0 / GAMMA;\n\n// linear to sRGB approximation\n// see http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html\nvec3 LINEARtoSRGB(vec3 color)\n{\n    return pow(color, vec3(INV_GAMMA));\n}\n\n// sRGB to linear approximation\n// see http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html\nvec4 SRGBtoLINEAR(vec4 srgbIn)\n{\n    return vec4(pow(srgbIn.xyz, vec3(GAMMA)), srgbIn.w);\n}\n\n// Uncharted 2 tone map\n// see: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nvec3 toneMapUncharted2Impl(vec3 color)\n{\n    const float A = 0.15;\n    const float B = 0.50;\n    const float C = 0.10;\n    const float D = 0.20;\n    const float E = 0.02;\n    const float F = 0.30;\n    return ((color*(A*color+C*B)+D*E)/(color*(A*color+B)+D*F))-E/F;\n}\n\nvec3 toneMapUncharted(vec3 color)\n{\n    const float W = 11.2;\n    color = toneMapUncharted2Impl(color * 2.0);\n    vec3 whiteScale = 1.0 / toneMapUncharted2Impl(vec3(W));\n    return LINEARtoSRGB(color * whiteScale);\n}\n\n// Hejl Richard tone map\n// see: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nvec3 toneMapHejlRichard(vec3 color)\n{\n    color = max(vec3(0.0), color - vec3(0.004));\n    return (color*(6.2*color+.5))/(color*(6.2*color+1.7)+0.06);\n}\n\n// ACES tone map\n// see: https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 toneMapACES(vec3 color)\n{\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return LINEARtoSRGB(clamp((color * (A * color + B)) / (color * (C * color + D) + E), 0.0, 1.0));\n}\n\nvec3 toneMap(vec3 color)\n{\n    color *= uExposure;\n\n#ifdef TONEMAP_UNCHARTED\n    return toneMapUncharted(color);\n#endif\n\n#ifdef TONEMAP_HEJLRICHARD\n    return toneMapHejlRichard(color);\n#endif\n\n#ifdef TONEMAP_ACES\n    return toneMapACES(color);\n#endif\n\n    return LINEARtoSRGB(color);\n}\n\n\nout vec4 outColor;\n\n// KHR_lights_punctual extension.\n// see https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\nstruct Light {\n    vec3 direction;\n    float range;\n\n    vec3 color;\n    float intensity;\n\n    vec3 position;\n    float innerConeCos;\n\n    float outerConeCos;\n    int type;\n\n    vec2 padding;\n};\n\n// SPECULARGLOSSINESS\nuniform vec3 u_SpecularFactor;\nuniform vec4 u_DiffuseFactor;\nuniform float u_GlossinessFactor;\n\n//Sheen extension\nuniform float u_SheenIntensityFactor;\nuniform vec3 u_SheenColorFactor;\nuniform float u_SheenRoughness;\n\n//Clearcoat\nuniform float u_ClearcoatFactor;\nuniform float u_ClearcoatRoughnessFactor;\n\n// ALPHAMODE_MASK\nuniform float u_AlphaCutoff;\n\nuniform int u_MipCount;\n\nvec4 getBaseColor()\n{\n    vec4 baseColor = vec4(1.0, 1.0, 1.0, 1.0);\n\n    #if defined(MATERIAL_SPECULARGLOSSINESS)\n        baseColor = u_DiffuseFactor;\n    #elif defined(MATERIAL_METALLICROUGHNESS)\n        baseColor = uBaseColorFactor;\n    #endif\n\n    #if defined(MATERIAL_SPECULARGLOSSINESS) && defined(HAS_DIFFUSE_MAP)\n        baseColor *= SRGBtoLINEAR(texture(u_DiffuseSampler, getDiffuseUV()));\n    #elif defined(MATERIAL_METALLICROUGHNESS) && defined(HAS_BASE_COLOR_MAP)\n        baseColor *= SRGBtoLINEAR(texture(u_BaseColorSampler, getBaseColorUV()));\n    #endif\n\n    return baseColor * getVertexColor();\n}\n\nstruct MaterialInfo\n{\n    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)\n    vec3 f0;            // full reflectance color (normal incidence angle)\n\n    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])\n    vec3 diffuseColor;            // color contribution from diffuse lighting\n\n    vec3 f90;           // reflectance color at grazing angle\n    vec3 specularColor;           // color contribution from specular lighting\n\n    vec3 normal;\n\n    vec3 baseColor;\n    float sheenIntensity;\n    vec3 sheenColor;\n    float sheenRoughness;\n\n    float clearcoatFactor;\n    vec3 clearcoatNormal;\n    float clearcoatRoughness;\n};\n\n// Lambert lighting\n// see https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/\nvec3 lambertian(vec3 diffuseColor)\n{\n    return diffuseColor / M_PI;\n}\n\n// The following equation models the Fresnel reflectance term of the spec equation (aka F())\n// Implementation of fresnel from [4], Equation 15\nvec3 fresnelReflection(vec3 f0, vec3 f90, float VdotH)\n{\n    return f0 + (f90 - f0) * pow(clamp(1.0 - VdotH, 0.0, 1.0), 5.0);\n}\n\n// Smith Joint GGX\n// Note: Vis = G / (4 * NdotL * NdotV)\n// see Eric Heitz. 2014. Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs. Journal of Computer Graphics Techniques, 3\n// see Real-Time Rendering. Page 331 to 336.\n// see https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/geometricshadowing(specularg)\nfloat visibility(float NdotL, float NdotV, float alphaRoughness)\n{\n    float alphaRoughnessSq = alphaRoughness * alphaRoughness;\n\n    float GGXV = NdotL * sqrt(NdotV * NdotV * (1.0 - alphaRoughnessSq) + alphaRoughnessSq);\n    float GGXL = NdotV * sqrt(NdotL * NdotL * (1.0 - alphaRoughnessSq) + alphaRoughnessSq);\n\n    float GGX = GGXV + GGXL;\n    if (GGX > 0.0)\n    {\n        return 0.5 / GGX;\n    }\n    return 0.0;\n}\n\n// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\n// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\nfloat microfacetDistribution(float NdotH, float alphaRoughness)\n{\n    float alphaRoughnessSq = alphaRoughness * alphaRoughness;\n    float f = (NdotH * NdotH) * (alphaRoughnessSq - 1.0) + 1.0;\n    return alphaRoughnessSq / (M_PI * f * f);\n}\n\n//Sheen implementation-------------------------------------------------------------------------------------\n// See  https://github.com/sebavan/glTF/tree/KHR_materials_sheen/extensions/2.0/Khronos/KHR_materials_sheen\n\n// Estevez and Kulla http://www.aconty.com/pdf/s2017_pbs_imageworks_sheen.pdf\nfloat CharlieDistribution(float sheenRoughness, float NdotH)\n{\n    //float alphaG = sheenRoughness * sheenRoughness;\n    float invR = 1.0 / sheenRoughness;\n    float cos2h = NdotH * NdotH;\n    float sin2h = 1.0 - cos2h;\n    return (2.0 + invR) * pow(sin2h, invR * 0.5) / (2.0 * M_PI);\n}\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs#L136\nfloat NeubeltVisibility(float NdotL, float NdotV)\n{\n    return clamp(1.0 / (4.0 * (NdotL + NdotV - NdotL * NdotV)),0.0,1.0);\n}\n\nvec3 sheenLayer(vec3 sheenColor, float sheenIntensity, float sheenRoughness, float NdotL, float NdotV, float NdotH, vec3 diffuse_term)\n{\n    float sheenDistribution = CharlieDistribution(sheenRoughness, NdotH);\n    float sheenVisibility = NeubeltVisibility(NdotL, NdotV);\n    return sheenColor * sheenIntensity * sheenDistribution * sheenVisibility + (1.0 - sheenIntensity * sheenDistribution * sheenVisibility) * diffuse_term;\n}\n\n//--------------------- Clearcoat -------------------------------------------------------------------------\n// See https://github.com/ux3d/glTF/tree/KHR_materials_pbrClearcoat/extensions/2.0/Khronos/KHR_materials_clearcoat\nvec3 clearcoatBlending(vec3 color, vec3 clearcoatLayer, float clearcoatFactor, float NdotV, float NdotL, float VdotH)\n{\n    vec3 factor0 = (1.0 - clearcoatFactor * fresnelReflection(vec3(0.04), vec3(1.0), NdotV)) * (1.0 - clearcoatFactor * fresnelReflection(vec3(0.04), vec3(1.0), NdotL));\n    vec3 factor1 = clearcoatFactor * fresnelReflection(vec3(0.04), vec3(1.0), VdotH);\n    return color * factor0 + clearcoatLayer * factor1;\n}\n\n\n//https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#acknowledgments AppendixB\nvec3 diffuseBRDF(vec3 f0, vec3 f90, vec3 diffuseColor, float VdotH)\n{\n    return (1.0 - fresnelReflection(f0, f90, VdotH)) * lambertian(diffuseColor);\n}\n\n//  https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#acknowledgments AppendixB\nvec3 specularMicrofacetBRDF (vec3 f0, vec3 f90, float alphaRoughness, float VdotH, float NdotL, float NdotV, float NdotH)\n{\n    vec3 F = fresnelReflection(f0, f90, VdotH);\n    float Vis = visibility(NdotL, NdotV, alphaRoughness);\n    float D = microfacetDistribution(NdotH, alphaRoughness);\n\n    return F * Vis * D;\n}\n\n// Calculation of the lighting contribution from an optional Image Based Light source.\n// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].\n// See our README.md on Environment Maps [3] for additional discussion.\n#ifdef USE_IBL\nvec3 getIBLContribution(MaterialInfo materialInfo, vec3 v)\n{\n    float NdotV = clamp(dot(materialInfo.normal, v), 0.0, 1.0);\n\n    float lod = clamp(materialInfo.perceptualRoughness * float(u_MipCount), 0.0, float(u_MipCount));\n    vec3 reflection = normalize(reflect(-v, materialInfo.normal));\n\n    vec2 brdfSamplePoint = clamp(vec2(NdotV, materialInfo.perceptualRoughness), vec2(0.0, 0.0), vec2(1.0, 1.0));\n    // retrieve a scale and bias to F0. See [1], Figure 3\n    vec2 brdf = texture(u_brdfLUT, brdfSamplePoint).rg;\n\n    vec4 diffuseSample = texture(u_DiffuseEnvSampler, materialInfo.normal);\n    vec4 specularSample = textureLod(u_SpecularEnvSampler, reflection, lod);\n\n#ifdef USE_HDR\n    // Already linear.\n    vec3 diffuseLight = diffuseSample.rgb;\n    vec3 specularLight = specularSample.rgb;\n#else\n    vec3 diffuseLight = SRGBtoLINEAR(diffuseSample).rgb;\n    vec3 specularLight = SRGBtoLINEAR(specularSample).rgb;\n#endif\n\n    vec3 diffuse = diffuseLight * materialInfo.diffuseColor;\n    vec3 specular = specularLight * (materialInfo.specularColor * brdf.x + brdf.y);\n\n#ifdef MATERIAL_SHEEN\n    float NdotL =  clampedDot(materialInfo.normal, reflection);\n    vec3 h = normalize(reflection + v);\n    float NdotH = clampedDot(materialInfo.normal, h);\n    diffuse = sheenLayer(materialInfo.sheenColor, materialInfo.sheenIntensity, materialInfo.sheenRoughness, NdotL, NdotV, NdotH, diffuse);\n#endif\n\n#ifdef MATERIAL_CLEARCOAT\n    NdotV = clamp(dot(materialInfo.clearcoatNormal, v), 0.0, 1.0);\n\n    lod = clamp(materialInfo.clearcoatRoughness * float(u_MipCount), 0.0, float(u_MipCount));\n    reflection = normalize(reflect(-v, materialInfo.clearcoatNormal));\n\n    brdfSamplePoint = clamp(vec2(NdotV, materialInfo.clearcoatRoughness), vec2(0.0, 0.0), vec2(1.0, 1.0));\n    // retrieve a scale and bias to F0. See [1], Figure 3\n    brdf = texture(u_brdfLUT, brdfSamplePoint).rg;\n\n    specularSample = textureLod(u_SpecularEnvSampler, reflection, lod);\n\n    #ifdef USE_HDR\n    // Already linear.\n        specularLight = specularSample.rgb;\n    #else\n        specularLight = SRGBtoLINEAR(specularSample).rgb;\n    #endif\n\n    float NdotL =  clampedDot(materialInfo.clearcoatNormal, reflection);\n    vec3 h = normalize(reflection + v);\n    float VdotH = clampedDot(v, h);\n    vec3 clearcoatLayer = specularLight * (vec3(1.0) * brdf.x + brdf.y);\n    return clearcoatBlending(diffuse + specular, clearcoatLayer, materialInfo.clearcoatFactor, NdotV,  NdotL, VdotH);\n#endif\n\n    return diffuse + specular;\n}\n#endif\n\n\nvec3 getPointShade(vec3 pointToLight, MaterialInfo materialInfo, vec3 view)\n{\n    AngularInfo angularInfo = getAngularInfo(pointToLight, materialInfo.normal, view);\n    if (angularInfo.NdotL > 0.0 || angularInfo.NdotV > 0.0)\n    {\n        // Calculation of analytical ligh\n        //https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#acknowledgments AppendixB\n        vec3 diffuseContrib = diffuseBRDF(materialInfo.f0, materialInfo.f90, materialInfo.diffuseColor, angularInfo.VdotH);\n        vec3 specContrib = specularMicrofacetBRDF(materialInfo.f0, materialInfo.f90, materialInfo.alphaRoughness, angularInfo.VdotH, angularInfo.NdotL, angularInfo.NdotV, angularInfo.NdotH);\n\n        // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\n        return angularInfo.NdotL * (diffuseContrib + specContrib);\n    }\n\n    return vec3(0.0, 0.0, 0.0);\n}\n\n// https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_lights_punctual/README.md#range-property\nfloat getRangeAttenuation(float range, float distance)\n{\n    if (range <= 0.0)\n    {\n        // negative range means unlimited\n        return 1.0;\n    }\n    return max(min(1.0 - pow(distance / range, 4.0), 1.0), 0.0) / pow(distance, 2.0);\n}\n\n// https://github.com/KhronosGroup/glTF/blob/master/extensions/2.0/Khronos/KHR_lights_punctual/README.md#inner-and-outer-cone-angles\nfloat getSpotAttenuation(vec3 pointToLight, vec3 spotDirection, float outerConeCos, float innerConeCos)\n{\n    float actualCos = dot(normalize(spotDirection), normalize(-pointToLight));\n    if (actualCos > outerConeCos)\n    {\n        if (actualCos < innerConeCos)\n        {\n            return smoothstep(outerConeCos, innerConeCos, actualCos);\n        }\n        return 1.0;\n    }\n    return 0.0;\n}\n\nvec3 applyDirectionalLight(Light light, MaterialInfo materialInfo, vec3 view)\n{\n    vec3 pointToLight = -light.direction;\n    vec3 shade = getPointShade(pointToLight, materialInfo, view);\n    return light.intensity * light.color * shade;\n}\n\nvec3 applyPointLight(Light light, MaterialInfo materialInfo, vec3 view)\n{\n    vec3 pointToLight = light.position - vPosition;\n    float distance = length(pointToLight);\n    float attenuation = getRangeAttenuation(light.range, distance);\n    vec3 shade = getPointShade(pointToLight, materialInfo, view);\n    return attenuation * light.intensity * light.color * shade;\n}\n\nvec3 applySpotLight(Light light, MaterialInfo materialInfo, vec3 view)\n{\n    vec3 pointToLight = light.position - vPosition;\n    float distance = length(pointToLight);\n    float rangeAttenuation = getRangeAttenuation(light.range, distance);\n    float spotAttenuation = getSpotAttenuation(pointToLight, light.direction, light.outerConeCos, light.innerConeCos);\n    vec3 shade = getPointShade(pointToLight, materialInfo, view);\n    return rangeAttenuation * spotAttenuation * light.intensity * light.color * shade;\n}\n\nvoid main()\n{\n    vec4 baseColor = getBaseColor();\n\n#ifdef ALPHAMODE_MASK\n    if(baseColor.a < u_AlphaCutoff)\n    {\n        discard;\n    }\n    baseColor.a = 1.0;\n#endif\n\n#ifdef ALPHAMODE_BLEND\n    baseColor.a = 0.9;\n#else\n    baseColor.a = 1.0;\n#endif\n\n#ifdef MATERIAL_UNLIT\n    outColor = (vec4(LINEARtoSRGB(baseColor.rgb), baseColor.a));\n    return;\n#endif\n\n    // Metallic and Roughness material properties are packed together\n    // In glTF, these factors can be specified by fixed scalar values\n    // or from a metallic-roughness map\n    float perceptualRoughness = 0.0;\n    float metallic = 0.0;\n\n    vec3 diffuseColor = vec3(0.0);\n    vec3 specularColor = vec3(0.0);\n    vec3 f0 = vec3(0.04);\n\n    vec4 output_color = baseColor;\n\n#ifdef MATERIAL_SPECULARGLOSSINESS\n\n#ifdef HAS_SPECULAR_GLOSSINESS_MAP\n    vec4 sgSample = SRGBtoLINEAR(texture(u_SpecularGlossinessSampler, getSpecularGlossinessUV()));\n    perceptualRoughness = (1.0 - sgSample.a * u_GlossinessFactor); // glossiness to roughness\n    f0 = sgSample.rgb * u_SpecularFactor; // specular\n#else\n    f0 = u_SpecularFactor;\n    perceptualRoughness = 1.0 - u_GlossinessFactor;\n#endif // ! HAS_SPECULAR_GLOSSINESS_MAP\n\n    // f0 = specular\n    specularColor = f0;\n    float oneMinusSpecularStrength = 1.0 - max(max(f0.r, f0.g), f0.b);\n    diffuseColor = baseColor.rgb * oneMinusSpecularStrength;\n\n#endif // ! MATERIAL_SPECULARGLOSSINESS\n\n#ifdef MATERIAL_METALLICROUGHNESS\n\n#ifdef HAS_METALLIC_ROUGHNESS_MAP\n    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\n    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\n    vec4 mrSample = texture(u_MetallicRoughnessSampler, getMetallicRoughnessUV());\n    perceptualRoughness = mrSample.g * uRoughnessFactor;\n    metallic = mrSample.b * uMetallicFactor;\n#else\n    metallic = uMetallicFactor;\n    perceptualRoughness = uRoughnessFactor;\n#endif\n\n    diffuseColor = baseColor.rgb * (vec3(1.0) - f0) * (1.0 - metallic);\n    specularColor = mix(f0, baseColor.rgb, metallic);\n#endif // ! MATERIAL_METALLICROUGHNESS\n\n    MaterialInfo materialInfo;\n\n    perceptualRoughness = clamp(perceptualRoughness, 0.0, 1.0);\n    metallic = clamp(metallic, 0.0, 1.0);\n\n    // Roughness is authored as perceptual roughness; as is convention,\n    // convert to material roughness by squaring the perceptual roughness [2].\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\n\n    // Compute reflectance.\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\n\n    vec3 specularEnvironmentR0 = specularColor.rgb;\n    // Anything less than 2% is physically impossible and is instead considered to be shadowing. Compare to \"Real-Time-Rendering\" 4th editon on page 325.\n    vec3 specularEnvironmentR90 = vec3(clamp(reflectance * 50.0, 0.0, 1.0));\n\n#ifdef MATERIAL_SHEEN\n    #ifdef HAS_SHEEN_COLOR_INTENSITY_TEXTURE_MAP\n        vec3 sheenSample = texture(u_sheenColorIntensitySampler, getSheenUV());\n        materialInfo.sheenColor = sheenSample.xyz * u_SheenColorFactor;\n        materialInfo.sheenIntensity = sheenSample.w * u_SheenIntensityFactor;\n    #else\n        materialInfo.sheenColor = u_SheenColorFactor;\n        materialInfo.sheenIntensity = u_SheenIntensityFactor;\n    #endif\n    materialInfo.sheenRoughness = u_SheenRoughness;\n#endif\n\n#ifdef MATERIAL_CLEARCOAT\n    #ifdef HAS_CLEARCOAT_TEXTURE_MAP\n        vec4 ccSample = texture(u_ClearcoatSampler, getClearcoatUV());\n        materialInfo.clearcoatFactor = ccSample.r * u_ClearcoatFactor;\n    #else\n        materialInfo.clearcoatFactor = u_ClearcoatFactor;\n    #endif\n\n    #ifdef HAS_CLEARCOAT_ROUGHNESS_MAP\n        vec4 ccSampleRough = texture(u_ClearcoatRoughnessSampler, getClearcoatRoughnessUV());\n        materialInfo.clearcoatRoughness = ccSampleRough.g * u_ClearcoatRoughnessFactor;\n    #else\n        materialInfo.clearcoatRoughness = u_ClearcoatRoughnessFactor;\n    #endif\n\n    #ifdef HAS_CLEARCOAT_NORMAL_MAP\n        vec4 ccSampleNor = texture(u_ClearcoatNormalSampler, getClearcoatNormalUV());\n        materialInfo.clearcoatNormal = ccSampleNor.xyz;\n    #else\n        materialInfo.clearcoatNormal = getSurface();\n    #endif\n#endif\n\n    // LIGHTING\n    vec3 color = vec3(baseColor.r * 0.15, baseColor.g * 0.15, baseColor.b * 0.15);\n    vec3 normal = getNormal();\n    vec3 view = normalize(uCamera - vPosition);\n\n    materialInfo.perceptualRoughness = perceptualRoughness;\n    materialInfo.f0 = specularEnvironmentR0;\n    materialInfo.alphaRoughness = alphaRoughness;\n    materialInfo.diffuseColor = diffuseColor;\n    materialInfo.f90 = specularEnvironmentR90;\n    materialInfo.specularColor = specularColor;\n    materialInfo.normal = normal;\n    materialInfo.baseColor = baseColor.rgb;\n\n/*#ifdef USE_PUNCTUAL\n    for (int i = 0; i < LIGHT_COUNT; ++i)\n    {\n        vec3 lightColor = vec3(0);\n        Light light = u_Lights[i];\n        if (light.type == LightType_Directional)\n        {\n            lightColor += applyDirectionalLight(light, materialInfo, view);\n        }\n        else if (light.type == LightType_Point)\n        {\n            lightColor += applyPointLight(light, materialInfo, view);\n        }\n        else if (light.type == LightType_Spot)\n        {\n            lightColor += applySpotLight(light, materialInfo, view);\n        }\n        color += lightColor;\n    }\n#endif*/\n    //Light light2 = Light(vec3(-0.9243900179862976, -0.3468450903892517, 0.15875054895877838), 10.0, vec3(1, 0.5699955821037292, 0.2395770400762558), 8.0, vec3(0, 0, 500), 0.0, 0.7853975, 0, vec2(0, 0));\n    Light light = Light(vec3(-0.12252257764339447, -0.6230136752128601, -0.7725556492805481), 10.0, vec3(1, 0.5699955821037292, 0.2395770400762558), 8.0, vec3(0, 0, 500), 0.0, 0.7853975, 0, vec2(0, 0));\n    color += applyDirectionalLight(light, materialInfo, view);\n    //color += applyDirectionalLight(light2, materialInfo, view);\n\n    // Calculate lighting contribution from image based lighting source (IBL)\n#ifdef USE_IBL\n    color += getIBLContribution(materialInfo, view);\n#endif\n\n    float ao = 1.0;\n\n    // Apply optional PBR terms for additional (optional) shading\n#ifdef HAS_OCCLUSION_MAP\n    ao = texture(u_OcclusionSampler,  getOcclusionUV()).r;\n    color = mix(color, color * ao, u_OcclusionStrength);\n#endif\n\n    vec3 emissive = vec3(0, 0, 0); // u_EmissiveFactor\n#ifdef HAS_EMISSIVE_MAP\n    emissive *= SRGBtoLINEAR(texture(u_EmissiveSampler, getEmissiveUV())).rgb;\n#endif\n    color += emissive;\n\n#ifndef DEBUG_OUTPUT // no debug\n\n    // regular shading\n    output_color = vec4(toneMap(color), baseColor.a);\n\n#else // debug output\n\n    #ifdef DEBUG_ROUGHNESS\n        output_color.rgb = vec3(perceptualRoughness);\n    #endif\n\n    #ifdef DEBUG_NORMAL\n        #ifdef HAS_NORMAL_MAP\n            output_color.rgb = texture(u_NormalSampler, getNormalUV()).rgb;\n        #else\n            output_color.rgb = vec3(0.5, 0.5, 1.0);\n        #endif\n    #endif\n\n    #ifdef DEBUG_BASECOLOR\n        output_color.rgb = LINEARtoSRGB(baseColor.rgb);\n    #endif\n\n    #ifdef DEBUG_OCCLUSION\n        output_color.rgb = vec3(ao);\n    #endif\n\n    #ifdef DEBUG_EMISSIVE\n        output_color.rgb = LINEARtoSRGB(emissive).rgb;\n    #endif\n\n    #ifdef DEBUG_F0\n        output_color.rgb = vec3(f0);\n    #endif\n\n    #ifdef DEBUG_ALPHA\n        output_color.rgb = vec3(baseColor.a);\n    #endif\n\n    output_color.a = 1.0;\n\n#endif // !DEBUG_OUTPUT\n\n    outColor = output_color;\n}\n",u=function(){function e(e){this._doubleSided=!1,this._alphaMode="OPAQUE";var n=e.attributes.POSITION,t=e.attributes.NORMAL,r=e.attributes.TEXCOORD_0,i=e.attributes.COLOR_0,a=e.indices,u=e.material;if(this._vertices=n.value,this._indices=a.value,this._shader=new s(l,c),u&&(this._shader.define("HAS_MATERIALS"),this._shader.define("MATERIAL_METALLICROUGHNESS")),this._vao=o.createVertexArray(),o.bindVertexArray(this._vao),o.enableVertexAttribArray(0),o.bindBuffer(o.ARRAY_BUFFER,o.createBuffer()),o.vertexAttribPointer(0,3,o.FLOAT,!1,0,0),o.bufferData(o.ARRAY_BUFFER,n.value,o.STATIC_DRAW),this._shader.define("HAS_NORMALS"),o.enableVertexAttribArray(1),o.bindBuffer(o.ARRAY_BUFFER,o.createBuffer()),o.vertexAttribPointer(1,3,o.FLOAT,!1,0,0),o.bufferData(o.ARRAY_BUFFER,t.value,o.STATIC_DRAW),r&&(this._shader.define("HAS_TEXCOORDS"),o.enableVertexAttribArray(2),o.bindBuffer(o.ARRAY_BUFFER,o.createBuffer()),o.vertexAttribPointer(2,2,o.FLOAT,!1,0,0),o.bufferData(o.ARRAY_BUFFER,r.value,o.STATIC_DRAW)),i&&(this._shader.define("HAS_COLORS"),o.enableVertexAttribArray(3),o.bindBuffer(o.ARRAY_BUFFER,o.createBuffer()),o.vertexAttribPointer(3,4,o.FLOAT,!1,0,0),o.bufferData(o.ARRAY_BUFFER,i.value,o.STATIC_DRAW)),this._indicesSize=a.count,o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,o.createBuffer()),o.bufferData(o.ELEMENT_ARRAY_BUFFER,a.value,o.STATIC_DRAW),u&&"BLEND"===u.alphaMode&&(this._shader.define("IS_WATER"),this._shader.define("ALPHAMODE_BLEND")),this._shader.build(),this._shader.use(),u){this._doubleSided=u.doubleSided,this._alphaMode=u.alphaMode;var f=u.pbrMetallicRoughness;f.baseColorFactor?o.uniform4f(this._shader.getUniformLocation("uBaseColorFactor"),f.baseColorFactor[0],f.baseColorFactor[1],f.baseColorFactor[2],f.baseColorFactor[3]):o.uniform4f(this._shader.getUniformLocation("uBaseColorFactor"),1,1,1,1),o.uniform1f(this._shader.getUniformLocation("uMetallicFactor"),f.metallicFactor),o.uniform1f(this._shader.getUniformLocation("uRoughnessFactor"),f.roughnessFactor)}}return e.prototype.getVertices=function(){return this._vertices},e.prototype.getIndices=function(){return this._indices},e.prototype.draw=function(e,n,t,r){this._shader.use(),this._doubleSided?o.disable(o.CULL_FACE):o.enable(o.CULL_FACE),"BLEND"===this._alphaMode?(o.enable(o.BLEND),o.blendFuncSeparate(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA,o.ONE,o.ONE_MINUS_SRC_ALPHA),o.blendEquation(o.FUNC_ADD)):o.disable(o.BLEND),o.bindVertexArray(this._vao),o.uniformMatrix4fv(this._shader.getUniformLocation("uProjection"),!1,e),o.uniformMatrix4fv(this._shader.getUniformLocation("uView"),!1,n),o.uniformMatrix4fv(this._shader.getUniformLocation("uModel"),!1,t),o.uniform3f(this._shader.getUniformLocation("uCamera"),r[0],r[1],r[2]),o.drawElements(o.TRIANGLES,this._indicesSize,o.UNSIGNED_SHORT,0)},e}(),f=function(e,n,t,o){return new(t||(t=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,s)}l((o=o.apply(e,n||[])).next())}))},d=function(e,n){var t,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],o=0}finally{t=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},p=t(60).load,h=t(61).GLTFLoader,A=function(){this.transform=a.b.create(),this.vao=o.createVertexArray(),this.primitives=[],this.doubleSided=!1},g=function(){function e(){this._nodes=[],this._built=!1,this._viewMatrix=a.b.create(),this._ballPositions=[0,0,0],this._ballRotations=[0,0,0,1]}return e.prototype.initialize=function(e,n){return f(this,void 0,void 0,(function(){var t;return d(this,(function(o){switch(o.label){case 0:return[4,p(e,h,{parserVersion:2,postProcess:!0})];case 1:return t=o.sent(),this.parseNodes(t.scene.nodes,n),this._built=!0,[2]}}))}))},e.prototype.parseNodes=function(e,n){for(var t=0,o=e;t<o.length;t++){var r=o[t],i=new A;i.name=r.name,this._nodes.push(i);var s=r.rotation||[0,0,0,1],l=r.translation||[0,0,0],c=r.scale||[1,1,1],f=r.mesh;if(f&&f.primitives)for(var d=0,p=f.primitives;d<p.length;d++){var h=p[d],g=new u(h);i.name.includes("deska")?n.generateConvexCollision(l,s,c,g.getVertices()):"Golf_zogica"!==i.name&&("Luknja"===i.name.substring(0,6)?n.generateConcaveCollision(l,s,c,g.getVertices(),g.getIndices(),+i.name.replace("Luknja","")):n.generateConcaveCollision(l,s,c,g.getVertices(),g.getIndices())),i.primitives.push(g)}a.b.fromRotationTranslationScale(i.transform,s,l,c)}},e.prototype.update=function(e,n){this._built&&(this._ballPositions=e,this._ballRotations=n)},e.prototype.draw=function(e,n,t){if(this._built){var o=[];a.b.copy(this._viewMatrix,n);for(var r=0,i=this._nodes;r<i.length;r++){var s=i[r];o.push(a.b.clone(this._viewMatrix)),"Golf_zogica"===s.name&&a.b.fromRotationTranslationScale(s.transform,this._ballRotations,this._ballPositions,[.07023785263299942,.07023785263299942,.07023785263299942]),a.b.mul(this._viewMatrix,this._viewMatrix,s.transform);for(var l=0,c=s.primitives;l<c.length;l++){c[l].draw(e,this._viewMatrix,s.transform,t)}this._viewMatrix=o.pop()}}},e}();!function(e){e[e.YES_NO=0]="YES_NO",e[e.OK=1]="OK"}(r||(r={}));var m,_,v=function(){function e(){}return e.initialize=function(n){var t=this;document.getElementById("menu__start").addEventListener("click",(function(){t.screen("game"),t.engine.run()})),document.getElementById("menu__options").addEventListener("click",(function(){e.dialog("This is not implemented yet.",r.OK,window.close)})),document.getElementById("menu__exit").addEventListener("click",(function(){e.dialog("Are you sure you want to exit?",r.YES_NO,window.close)})),this.forceValue=document.getElementById("force__value"),this.engine=n},e.flow=function(e,n){document.getElementById("flow__"+e).innerText=n},e.screen=function(n){document.getElementById("screen__"+e.currentScreen).hidden=!0,document.getElementById("screen__"+n).hidden=!1,e.currentScreen=n},e.dialog=function(e,n,t){document.getElementById("dialog__yes_no").hidden=!0,document.getElementById("dialog__ok").hidden=!0,document.getElementById("dialog__text").innerText=e,n===r.YES_NO?(document.getElementById("dialog__yes_no").hidden=!1,document.getElementById("dialog__no").addEventListener("click",(function(){document.getElementById("dialog").hidden=!0})),document.getElementById("dialog__yes").addEventListener("click",(function(){t()}))):n===r.OK&&(document.getElementById("dialog__ok").hidden=!1,document.getElementById("dialog__okay").addEventListener("click",(function(){document.getElementById("dialog").hidden=!0}))),document.getElementById("dialog").hidden=!1},e.force=function(e){this.forceValue&&(this.forceValue.style.transform="scaleY("+e+")")},e.currentScreen="loading",e}(),C=function(){function e(){}return e.CURRENT=0,e.STROKES=0,e.ALL_STROKES=0,e.ALL=[{spawnpoint:[-1.37718,.124897,.21976],direction:[0,-.3,-1],holeAABB:[[0,0,0],[0,0,0]]},{spawnpoint:[-19.0117,.087875,.21976],direction:[0,-.3,-1],holeAABB:[[0,0,0],[0,0,0]]},{spawnpoint:[-29.4804,.124072,.21976],direction:[0,-.3,-1],holeAABB:[[0,0,0],[0,0,0]]},{spawnpoint:[-36.7476,.116281,-25.5886],direction:[0,-.3,1],holeAABB:[[0,0,0],[0,0,0]]},{spawnpoint:[-63.3003,13.7276,-34.565],direction:[0,-.3,1],holeAABB:[[0,0,0],[0,0,0]]}],e}(),b=function(e,n,t,o){return new(t||(t=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,s)}l((o=o.apply(e,n||[])).next())}))},S=function(e,n){var t,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],o=0}finally{t=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},y=t(30)();!function(e){e[e.WAITING=0]="WAITING",e[e.MOVING=1]="MOVING",e[e.READY=2]="READY",e[e.SHOOTING=3]="SHOOTING",e[e.FINISHING=4]="FINISHING"}(_||(_={}));var R=function(){function e(e){this._running=!1,this._pMatrix=a.b.create(),this._wMatrix=a.b.identity(a.b.create()),this._state=_.WAITING,this._currentForce=0,this._forceDelta=.01,this._canvas=i.initialize(e),this.resize=this.resize.bind(this),this.keypress=this.keypress.bind(this),this.keyup=this.keyup.bind(this),this.keydown=this.keydown.bind(this),window.onresize=this.resize,window.onkeypress=this.keypress,window.onkeyup=this.keyup,window.onkeydown=this.keydown,y.distanceBounds=[1.5,15],y.phiBounds=[.001,Math.PI/2],y.zoomSpeed=.001,y.position=[-100,20,80],this.resize()}return e.prototype.initPhysics=function(){var e=new m.btDefaultCollisionConfiguration,n=new m.btCollisionDispatcher(e),t=new m.btDbvtBroadphase,o=new m.btSequentialImpulseConstraintSolver;this._physicsWorld=new m.btDiscreteDynamicsWorld(n,t,o,e),this._physicsWorld.setGravity(new m.btVector3(0,-9.82,0)),this._vectorCache=[new m.btVector3,new m.btVector3,new m.btVector3],this._transformCache=[new m.btTransform,new m.btTransform]},e.prototype.start=function(e){return b(this,void 0,void 0,(function(){return S(this,(function(n){switch(n.label){case 0:return o.clearColor(0,0,0,1),o.clear(o.COLOR_BUFFER_BIT|o.DEPTH_BUFFER_BIT),o.enable(o.DEPTH_TEST),o.frontFace(o.CCW),o.cullFace(o.BACK),m=e,this.initPhysics(),v.flow("loading","Scene and collisions"),console.time("Scene and collisions"),this._scene=new g,[4,this._scene.initialize("assets/golf_court.glb",this)];case 1:return n.sent(),this.generateBallCollision(),console.timeEnd("Scene and collisions"),a.b.perspective(this._pMatrix,a.a.toRadian(45),window.innerWidth/window.innerHeight,.1,1e3),v.screen("menu"),this.loop=this.loop.bind(this),requestAnimationFrame(this.loop),[2]}}))}))},e.prototype.run=function(){this._running=!0,this.prepareLevel(),v.dialog("Hold S to shoot or press R to reset.",1,void 0)},e.prototype.generateConcaveCollision=function(e,n,t,o,r,i){void 0===i&&(i=!1);var a=new m.btTransform;a.setIdentity(),a.setOrigin(new m.btVector3(e[0],e[1],e[2])),a.setRotation(new m.btQuaternion(n[0],n[1],n[2],n[3]));var s=new m.btDefaultMotionState(a),l=new m.btTriangleMesh;l.setScaling(new m.btVector3(t[0],t[1],t[2]));for(var c=0;c<r.length/3;++c){var u=r[3*c+0],f=r[3*c+1],d=r[3*c+2];this._vectorCache[0].setValue(o[3*u+0],o[3*u+1],o[3*u+2]),this._vectorCache[1].setValue(o[3*f+0],o[3*f+1],o[3*f+2]),this._vectorCache[2].setValue(o[3*d+0],o[3*d+1],o[3*d+2]),l.addTriangle(this._vectorCache[0],this._vectorCache[1],this._vectorCache[2],!1)}var p=new m.btBvhTriangleMeshShape(l,!0,!0),h=new m.btVector3(0,0,0),A=new m.btRigidBodyConstructionInfo(0,s,p,h),g=new m.btRigidBody(A);if(g.setRestitution(1),i){var _=new m.btVector3,v=new m.btVector3;g.getAabb(_,v),C.ALL[i-1].holeAABB=[[_.x(),_.y(),_.z()],[v.x(),v.y(),v.z()]]}this._physicsWorld.addRigidBody(g)},e.prototype.generateConvexCollision=function(e,n,t,o){var r=new m.btTransform;r.setIdentity(),r.setOrigin(new m.btVector3(e[0],e[1],e[2])),r.setRotation(new m.btQuaternion(n[0],n[1],n[2],n[3]));var i=new m.btDefaultMotionState(r),a=new m.btConvexHullShape;a.setLocalScaling(new m.btVector3(t[0],t[1],t[2]));for(var s=0;s<o.length/3;++s)this._vectorCache[0].setValue(o[3*s],o[3*s+1],o[3*s+2]),a.addPoint(this._vectorCache[0]);a.setMargin(0);var l=new m.btVector3(0,0,0),c=new m.btRigidBodyConstructionInfo(0,i,a,l),u=new m.btRigidBody(c);u.setRestitution(1),this._physicsWorld.addRigidBody(u)},e.prototype.generateBallCollision=function(){var e=new m.btTransform;e.setIdentity(),e.setOrigin(new m.btVector3(C.ALL[C.CURRENT].spawnpoint[0],C.ALL[C.CURRENT].spawnpoint[1],C.ALL[C.CURRENT].spawnpoint[2])),e.setRotation(new m.btQuaternion(0,0,0,1));var n=new m.btDefaultMotionState(e),t=new m.btSphereShape(.07023785263299942);t.setMargin(1);var o=new m.btVector3(0,0,0);t.calculateLocalInertia(.046,o);var r=new m.btRigidBodyConstructionInfo(.046,n,t,o);this._sphere=new m.btRigidBody(r),this._sphere.setCcdMotionThreshold(.05),this._sphere.setCcdSweptSphereRadius(.06),this._sphere.setRestitution(.4),this._sphere.setDamping(.5,.5),this._physicsWorld.addRigidBody(this._sphere)},e.prototype.prepareLevel=function(){v.flow("hole","Hole: "+(C.CURRENT+1)),C.STROKES=0,v.flow("strokes","Strokes: "+C.STROKES);var e=+localStorage.getItem("best");e&&v.flow("personal-best","Personal Best: "+e),this.resetBall()},e.prototype.resetBall=function(){y.target=C.ALL[C.CURRENT].spawnpoint,y.direction=C.ALL[C.CURRENT].direction,y.position=[y.target[0]-y.direction[0],y.target[1]-y.direction[1],y.target[2]-y.direction[2]];var e=new m.btTransform;e.setIdentity(),e.setOrigin(new m.btVector3(C.ALL[C.CURRENT].spawnpoint[0],C.ALL[C.CURRENT].spawnpoint[1],C.ALL[C.CURRENT].spawnpoint[2])),e.setRotation(new m.btQuaternion(0,0,0,1)),this._sphere.setWorldTransform(e),this._sphere.getMotionState().setWorldTransform(e),this._sphere.setLinearVelocity(new m.btVector3(0,0,0)),this._sphere.setAngularVelocity(new m.btVector3(0,0,0)),this._scene.update(y.target,[0,0,0,1]),y.update(),this._state=_.READY},e.prototype.isBallInHole=function(){var e=C.ALL[C.CURRENT].holeAABB;return y.target[0]>=e[0][0]&&y.target[0]<=e[1][0]&&y.target[1]>=e[0][1]&&y.target[1]<=e[1][1]-.15&&y.target[2]>=e[0][2]&&y.target[2]<=e[1][2]},e.prototype.resize=function(){void 0!==this._canvas&&(this._canvas.width=window.innerWidth,this._canvas.height=window.innerHeight,o.viewport(0,0,this._canvas.width,this._canvas.height),a.b.perspective(this._pMatrix,a.a.toRadian(45),this._canvas.width/this._canvas.height,.1,1e3))},e.prototype.keypress=function(e){this._sphere.isActive()||this._sphere.activate(),"KeyR"===e.code&&(this.resetBall(),v.flow("strokes","Strokes: "+ ++C.STROKES),v.flow("all-strokes","All Strokes: "+ ++C.ALL_STROKES)),window.DEBUG&&("KeyT"===e.code?(this._sphere.setLinearVelocity(new m.btVector3(5*y.direction[0],0,5*y.direction[2])),this._state=_.MOVING):"KeyZ"===e.code?(this._sphere.setLinearVelocity(new m.btVector3(0,0,0)),this._sphere.setAngularVelocity(new m.btVector3(0,0,0)),this._state=_.READY):"Space"===e.code?(this._sphere.setLinearVelocity(new m.btVector3(0,5,0)),this._state=_.MOVING):"KeyF"===e.code&&(console.log(y.target),console.log(y.direction),console.log(y.up)))},e.prototype.keydown=function(e){this._state===_.READY&&83===e.keyCode&&(this._state=_.SHOOTING)},e.prototype.keyup=function(n){this._state===_.SHOOTING&&83===n.keyCode&&(this._state=_.MOVING,this._sphere.setLinearVelocity(new m.btVector3(y.direction[0]*(this._currentForce*e.MAX_FORCE),0,y.direction[2]*(this._currentForce*e.MAX_FORCE))),this._currentForce=0,this._forceDelta=Math.abs(this._forceDelta),v.force(this._currentForce),v.flow("strokes","Strokes: "+ ++C.STROKES),v.flow("all-strokes","All Strokes: "+ ++C.ALL_STROKES))},e.prototype.loop=function(n){if(o.clearColor(.37,.94,1,1),o.clear(o.COLOR_BUFFER_BIT|o.DEPTH_BUFFER_BIT),this._state===_.SHOOTING&&(this._currentForce+=this._forceDelta,(this._currentForce>=1||this._currentForce<=0)&&(this._forceDelta=-this._forceDelta),v.force(this._currentForce)),this._running){this._physicsWorld.stepSimulation(e.TIME_STEP,2);var t=this._sphere.getMotionState();if(t){t.getWorldTransform(this._transformCache[0]);var r=this._transformCache[0].getOrigin(),i=this._transformCache[0].getRotation();y.target=[r.x(),r.y(),r.z()],this._scene.update(y.target,[i.x(),i.y(),i.z(),i.w()])}if(y.update(),this._state===_.MOVING)if(this.isBallInHole()){if(this._state=_.FINISHING,++C.CURRENT>=C.ALL.length){var s=+localStorage.getItem("best");(!s||s&&C.ALL_STROKES<s)&&localStorage.setItem("best",String(C.ALL_STROKES)),C.CURRENT=0,C.STROKES=0,C.ALL_STROKES=0,v.flow("strokes","Strokes: "+C.STROKES),v.flow("all-strokes","All Strokes: "+C.ALL_STROKES)}this.prepareLevel()}else 0===this._sphere.getLinearVelocity().dot(this._sphere.getAngularVelocity())&&(this._state=_.READY)}else y.position[0]>-216&&(y.position[0]-=.01,y.position[2]-=.01);a.b.lookAt(this._wMatrix,y.position,y.target,y.up),this._scene.draw(this._pMatrix,this._wMatrix,y.position),requestAnimationFrame(this.loop)},e.TIME_STEP=1/60,e.MAX_FORCE=50,e}(),w=function(e,n,t,o){return new(t||(t=Promise))((function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,s)}l((o=o.apply(e,n||[])).next())}))},E=function(e,n){var t,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(e,a)}catch(e){i=[6,e],o=0}finally{t=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},B=t(53);window.DEBUG=!1,window.onload=function(){return w(void 0,void 0,void 0,(function(){var e;return E(this,(function(n){return v.flow("loading","Canvas"),e=new R("game"),v.initialize(e),v.flow("loading","Physics Engine"),B().then((function(n){e.start(n)})),[2]}))}))},console.log("Welcome to Mini Golf!")},8:function(e,n){}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,